))
return(NULL)
})
# Validasi kolom pertama adalah variabel target (death)
if (ncol(data) < 2) {
showModal(modalDialog(
title = "Error",
"File CSV harus memiliki minimal dua kolom. Kolom pertama adalah target (death).",
easyClose = TRUE,
footer = NULL
))
return(NULL)
}
# Menentukan target dan prediktor
target <- names(data)[1]  # Kolom pertama adalah target
predictors <- names(data)[-1]  # Sisanya adalah prediktor
list(data = data, target = target, predictors = predictors)
})
# Menampilkan data preview
output$data_preview <- renderTable({
req(dataset())
head(dataset()$data, 10)
})
# Menampilkan pilihan variabel target dan prediktor
output$var_target <- renderUI({
req(dataset())
selectInput("target", "Pilih Variabel Target", names(dataset()$data)[1])  # Hanya kolom pertama (target)
})
output$var_predictors <- renderUI({
req(dataset())
selectInput("predictors", "Pilih Variabel Prediktor", names(dataset()$data)[-1], multiple = TRUE)  # Sisanya adalah prediktor
})
# Step 4: Train Model on Button Click
model <- reactiveVal(NULL)
observeEvent(input$train_model, {
req(dataset())
# Ambil data, target dan prediktor
data <- dataset()$data
target <- input$target
predictors <- input$predictors
# Convert predictors to numeric
data[,predictors] <- lapply(data[,predictors], as.numeric)
# Buat formula dinamis berdasarkan kolom yang ada
formula <- as.formula(paste(target, "~", paste(predictors, collapse = "+")))
# Latih model
model_fit <- nr_logistic(formula = formula, data = data)
model(model_fit)
# Output untuk setiap tab
# 1. Tab Model Training - nr_logistic output
output$nr_logistic_output <- renderPrint({
summary(model_fit)
})
# 2. Tab Predictions
output$predict_output <- renderPrint({
probs <- predict(model_fit, newdata = data, type = "response")
pred_class <- ifelse(probs > 0.5, 1, 0)
cat("Predictions (first 5 rows):\n\n")
print(head(data.frame(
Actual = data[[target]],
Probability = round(probs, 4),
Predicted_Class = pred_class
), 5))
})
# 3. Tab Evaluation
output$evaluate_output <- renderPrint({
probs <- predict(model_fit, newdata = data, type = "response")
pred_class <- ifelse(probs > 0.5, 1, 0)
actual <- data[[target]]
# Pastikan kedua kelas 0 dan 1 ada dengan mendefinisikan faktor
actual_f <- factor(actual, levels = c(0, 1))
pred_class_f <- factor(pred_class, levels = c(0, 1))
conf_mat <- table(Actual = actual_f, Predicted = pred_class_f)
# Hitung accuracy
accuracy <- sum(diag(conf_mat)) / sum(conf_mat)
# Hitung precision dan recall dengan handle kemungkinan pembagian dengan nol
precision <- if (sum(conf_mat[, "1"]) == 0) NA else conf_mat["1", "1"] / sum(conf_mat[, "1"])
recall <- if (sum(conf_mat["1", ]) == 0) NA else conf_mat["1", "1"] / sum(conf_mat["1", ])
cat("Model Evaluation Metrics:\n\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", ifelse(is.na(precision), "NA", round(precision, 4)), "\n")
cat("Recall:", ifelse(is.na(recall), "NA", round(recall, 4)), "\n\n")
cat("Confusion Matrix:\n")
print(conf_mat)
})
# 4. Tab ROC Curve
output$roc_plot <- renderPlot({
probs <- predict(model_fit, newdata = data, type = "response")
actual <- data[[target]]
plot_roc(actual, probs)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
shinyApp(ui = ui, server = server)
library(logregNR)
library(shiny)
# Step 1: Handle file input and check format
server <- function(input, output, session) {
dataset <- reactive({
req(input$file1)
# Membaca file CSV
data <- tryCatch({
read.csv(input$file1$datapath)
}, error = function(e) {
showModal(modalDialog(
title = "Error",
"Terjadi kesalahan saat membaca file CSV. Pastikan format CSV sudah benar.",
easyClose = TRUE,
footer = NULL
))
return(NULL)
})
# Validasi kolom pertama adalah variabel target (death)
if (ncol(data) < 2) {
showModal(modalDialog(
title = "Error",
"File CSV harus memiliki minimal dua kolom. Kolom pertama adalah target (death).",
easyClose = TRUE,
footer = NULL
))
return(NULL)
}
# Menentukan target dan prediktor
target <- names(data)[1]  # Kolom pertama adalah target
predictors <- names(data)[-1]  # Sisanya adalah prediktor
list(data = data, target = target, predictors = predictors)
})
# Menampilkan data preview
output$data_preview <- renderTable({
req(dataset())
head(dataset()$data, 10)
})
# Menampilkan pilihan variabel target dan prediktor
output$var_target <- renderUI({
req(dataset())
selectInput("target", "Pilih Variabel Target", names(dataset()$data)[1])  # Hanya kolom pertama (target)
})
output$var_predictors <- renderUI({
req(dataset())
selectInput("predictors", "Pilih Variabel Prediktor", names(dataset()$data)[-1], multiple = TRUE)  # Sisanya adalah prediktor
})
# Step 4: Train Model on Button Click
model <- reactiveVal(NULL)
observeEvent(input$train_model, {
req(dataset())
# Ambil data, target dan prediktor
data <- dataset()$data
target <- input$target
predictors <- input$predictors
# Convert predictors to numeric
data[,predictors] <- lapply(data[,predictors], as.numeric)
# Buat formula dinamis berdasarkan kolom yang ada
formula <- as.formula(paste(target, "~", paste(predictors, collapse = "+")))
# Latih model
model_fit <- nr_logistic(formula = formula, data = data)
model(model_fit)
# Output untuk setiap tab
# 1. Tab Model Training - nr_logistic output
output$nr_logistic_output <- renderPrint({
summary(model_fit)
})
# 2. Tab Predictions
output$predict_output <- renderPrint({
probs <- predict(model_fit, newdata = data, type = "response")
pred_class <- ifelse(probs > 0.5, 1, 0)
cat("Predictions (first 5 rows):\n\n")
print(head(data.frame(
Actual = data[[target]],
Probability = round(probs, 4),
Predicted_Class = pred_class
), 5))
})
# 3. Tab Evaluation
output$evaluate_output <- renderPrint({
probs <- predict(model_fit, newdata = data, type = "response")
pred_class <- ifelse(probs > 0.5, 1, 0)
actual <- data[[target]]
# Pastikan kedua kelas 0 dan 1 ada dengan mendefinisikan faktor
actual_f <- factor(actual, levels = c(0, 1))
pred_class_f <- factor(pred_class, levels = c(0, 1))
conf_mat <- table(Actual = actual_f, Predicted = pred_class_f)
# Hitung accuracy
accuracy <- sum(diag(conf_mat)) / sum(conf_mat)
# Hitung precision dan recall dengan handle kemungkinan pembagian dengan nol
precision <- if (sum(conf_mat[, "1"]) == 0) NA else conf_mat["1", "1"] / sum(conf_mat[, "1"])
recall <- if (sum(conf_mat["1", ]) == 0) NA else conf_mat["1", "1"] / sum(conf_mat["1", ])
cat("Model Evaluation Metrics:\n\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", ifelse(is.na(precision), "NA", round(precision, 4)), "\n")
cat("Recall:", ifelse(is.na(recall), "NA", round(recall, 4)), "\n\n")
cat("Confusion Matrix:\n")
print(conf_mat)
})
# 4. Tab ROC Curve
output$roc_plot <- renderPlot({
probs <- predict(model_fit, newdata = data, type = "response")
actual <- data[[target]]
plot_roc(actual, probs)
})
})
}
shinyApp(ui = ui, server = server)
library(logregNR)
# Step 1: Handle file input and check format
server <- function(input, output, session) {
dataset <- reactive({
req(input$file1)
# Membaca file CSV
data <- tryCatch({
read.csv(input$file1$datapath)
}, error = function(e) {
showModal(modalDialog(
title = "Error",
"Terjadi kesalahan saat membaca file CSV. Pastikan format CSV sudah benar.",
easyClose = TRUE,
footer = NULL
))
return(NULL)
})
# Validasi kolom pertama adalah variabel target (death)
if (ncol(data) < 2) {
showModal(modalDialog(
title = "Error",
"File CSV harus memiliki minimal dua kolom. Kolom pertama adalah target (death).",
easyClose = TRUE,
footer = NULL
))
return(NULL)
}
# Menentukan target dan prediktor
target <- names(data)[1]  # Kolom pertama adalah target
predictors <- names(data)[-1]  # Sisanya adalah prediktor
list(data = data, target = target, predictors = predictors)
})
# Menampilkan data preview
output$data_preview <- renderTable({
req(dataset())
head(dataset()$data, 10)
})
# Menampilkan pilihan variabel target dan prediktor
output$var_target <- renderUI({
req(dataset())
selectInput("target", "Pilih Variabel Target", names(dataset()$data)[1])  # Hanya kolom pertama (target)
})
output$var_predictors <- renderUI({
req(dataset())
selectInput("predictors", "Pilih Variabel Prediktor", names(dataset()$data)[-1], multiple = TRUE)  # Sisanya adalah prediktor
})
# Step 4: Train Model on Button Click
model <- reactiveVal(NULL)  # Store model
observeEvent(input$train_model, {
req(dataset())
# Ambil data, target dan prediktor
data <- dataset()$data
target <- input$target
predictors <- input$predictors
# Convert predictors to numeric
data[,predictors] <- lapply(data[,predictors], as.numeric)
# Buat formula dinamis berdasarkan kolom yang ada
formula <- as.formula(paste(target, "~", paste(predictors, collapse = "+")))
# Latih model
model_fit <- nr_logistic(formula = formula, data = data)
model(model_fit)
# Tampilkan output nr_logistic menggunakan summary()
output$nr_logistic_output <- renderPrint({
print(summary(model_fit))  # Langsung menggunakan fungsi summary()
})
# 2. predict()
output$predict_output <- renderPrint({
predictions <- predict(model_fit, newdata = data, type = "response")
cat("Predictions (first 5 rows):\n")
print(head(predictions))
})
# 3. evaluate_model()
output$evaluate_output <- renderPrint({
pred_class <- predict(model_fit, newdata = data, type = "class")
actual <- data[[target]]
eval_results <- evaluate_model(actual, pred_class)
print(eval_results)
})
# 4. plot_roc()
output$roc_plot <- renderPlot({
probs <- predict(model_fit, newdata = data, type = "response")
actual <- data[[target]]
plot_roc(actual, probs)
})
})
}
ui <- fluidPage(
titlePanel("Aplikasi Log Regresi Newton Raphson"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Pilih File CSV",
accept = c(".csv")),
uiOutput("var_target"),
uiOutput("var_predictors"),
actionButton("train_model", "Latih Model", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Upload CSV",
tableOutput("data_preview")),
tabPanel("Model Training",
h4("Hasil Newton-Raphson Logistic Regression"),
verbatimTextOutput("nr_logistic_output")),
tabPanel("Predictions",
h4("Hasil Prediksi"),
verbatimTextOutput("predict_output")),
tabPanel("Evaluation",
h4("Hasil Evaluasi Model"),
verbatimTextOutput("evaluate_output")),
tabPanel("ROC Curve",
h4("ROC Curve"),
plotOutput("roc_plot"))
)
)
)
)
library(ui)
library(logregNR)
# Step 1: Handle file input and check format
server <- function(input, output, session) {
dataset <- reactive({
req(input$file1)
# Membaca file CSV
data <- tryCatch({
read.csv(input$file1$datapath)
}, error = function(e) {
showModal(modalDialog(
title = "Error",
"Terjadi kesalahan saat membaca file CSV. Pastikan format CSV sudah benar.",
easyClose = TRUE,
footer = NULL
))
return(NULL)
})
# Validasi kolom pertama adalah variabel target (death)
if (ncol(data) < 2) {
showModal(modalDialog(
title = "Error",
"File CSV harus memiliki minimal dua kolom. Kolom pertama adalah target (death).",
easyClose = TRUE,
footer = NULL
))
return(NULL)
}
# Menentukan target dan prediktor
target <- names(data)[1]  # Kolom pertama adalah target
predictors <- names(data)[-1]  # Sisanya adalah prediktor
list(data = data, target = target, predictors = predictors)
})
# Menampilkan data preview
output$data_preview <- renderTable({
req(dataset())
head(dataset()$data, 10)
})
# Menampilkan pilihan variabel target dan prediktor
output$var_target <- renderUI({
req(dataset())
selectInput("target", "Pilih Variabel Target", names(dataset()$data)[1])  # Hanya kolom pertama (target)
})
output$var_predictors <- renderUI({
req(dataset())
selectInput("predictors", "Pilih Variabel Prediktor", names(dataset()$data)[-1], multiple = TRUE)  # Sisanya adalah prediktor
})
# Step 4: Train Model on Button Click
model <- reactiveVal(NULL)  # Store model
observeEvent(input$train_model, {
req(dataset())
# Ambil data, target dan prediktor
data <- dataset()$data
target <- input$target
predictors <- input$predictors
# Convert predictors to numeric
data[,predictors] <- lapply(data[,predictors], as.numeric)
# Buat formula dinamis berdasarkan kolom yang ada
formula <- as.formula(paste(target, "~", paste(predictors, collapse = "+")))
# Latih model
model_fit <- nr_logistic(formula = formula, data = data)
model(model_fit)
# Tampilkan output nr_logistic menggunakan summary()
output$nr_logistic_output <- renderPrint({
print(summary(model_fit))  # Langsung menggunakan fungsi summary()
})
# 2. predict()
output$predict_output <- renderPrint({
predictions <- predict(model_fit, newdata = data, type = "response")
cat("Predictions (first 5 rows):\n")
print(head(predictions))
})
# 3. evaluate_model()
output$evaluate_output <- renderPrint({
pred_class <- predict(model_fit, newdata = data, type = "class")
actual <- data[[target]]
eval_results <- evaluate_model(actual, pred_class)
print(eval_results)
})
# 4. plot_roc()
output$roc_plot <- renderPlot({
probs <- predict(model_fit, newdata = data, type = "response")
actual <- data[[target]]
plot_roc(actual, probs)
})
})
}
ui <- fluidPage(
titlePanel("Aplikasi Log Regresi Newton Raphson"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Pilih File CSV",
accept = c(".csv")),
uiOutput("var_target"),
uiOutput("var_predictors"),
actionButton("train_model", "Latih Model", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Upload CSV",
tableOutput("data_preview")),
tabPanel("Model Training",
h4("Hasil Newton-Raphson Logistic Regression"),
verbatimTextOutput("nr_logistic_output")),
tabPanel("Predictions",
h4("Hasil Prediksi"),
verbatimTextOutput("predict_output")),
tabPanel("Evaluation",
h4("Hasil Evaluasi Model"),
verbatimTextOutput("evaluate_output")),
tabPanel("ROC Curve",
h4("ROC Curve"),
plotOutput("roc_plot"))
)
)
)
)
library(logregNR)
library(shiny)
library(ui)
shinyApp(ui = ui, server = server)
install.packages("FrF2")
library(FrF2)
library(FrF2)
factors <- c("Iklan_TV", "Iklan_Papan_Sepakbola", "Interaksi_Sosial",
"Minyak_Gratis", "Iklan_Radio", "Pengemasan", "Ukuran_Karton")
levels <- c(2)
# Menghasilkan desain faktorial pecahan 2^7-1
design <- FrF2(nruns = 8, nfactors = 7, factor.names = factors, default.levels = levels)
print(design)
factors <- data.frame(
Factor = c("TV Adv", "Football League Adv Boards", "Social Networking",
"Free of Charge (FOC) Oil", "Radio Adv", "Packaging", "Size of Carton"),
Low_Level = c("No Adv", "No Adv", "No Interaction", "No FOC", "No Adv", "Traditional", "12 bottle/carton"),
High_Level = c("Adv", "Adv", "Interaction", "FOC", "Adv", "Innovation", "24 bottle/carton")
)
print(factors)
library(FrF2)
factors <- c("Iklan_TV", "Iklan_Papan_Sepakbola", "Interaksi_Sosial",
"Minyak_Gratis", "Iklan_Radio", "Pengemasan", "Ukuran_Karton")
levels <- c(2)
# Menghasilkan desain faktorial pecahan 2^7-1
design <- FrF2(nruns = 8, nfactors = 7, factor.names = factors, default.levels = levels)
# Defining the factors
factors <- c("TV Adv", "Football League Adv Boards", "Social Networking",
"FOC Oil", "Radio Adv", "Packaging", "Size of Carton")
# Define default levels for all factors (2 levels for each)
levels <- rep(2, length(factors))  # Each factor has 2 levels
# Generate the fractional factorial design
design <- FrF2(nruns = 8, nfactors = 7, factor.names = factors, default.levels = levels)
# Print the design matrix
print(design)
factors <- data.frame(
Factor = c("TV Adv", "Football League Adv Boards", "Social Networking",
"Free of Charge (FOC) Oil", "Radio Adv", "Packaging", "Size of Carton"),
Low_Level = c("No Adv", "No Adv", "No Interaction", "No FOC", "No Adv", "Traditional", "12 bottle/carton"),
High_Level = c("Adv", "Adv", "Interaction", "FOC", "Adv", "Innovation", "24 bottle/carton")
)
print(factors)
# Assigning levels to each sales location (Table 3)
sales_data <- data.frame(
SalesLocation = 1:8,
A = c("-", "+", "-", "+", "+", "+", "-", "+"),
B = c("-", "+", "+", "+", "-", "-", "+", "+"),
C = c("+", "-", "+", "+", "+", "-", "+", "+"),
D = c("+", "+", "-", "+", "-", "+", "-", "+"),
E = c("-", "+", "+", "-", "+", "-", "+", "+"),
F = c("-", "+", "+", "+", "-", "-", "-", "+"),
G = c("+", "-", "+", "-", "+", "-", "+", "+"),
Response = c(155, 675, 410, 513, 575, 1050, 750, 1020)
)
print(sales_data)
# Encoding the factors to 1 and -1 for analysis
sales_data$A <- ifelse(sales_data$A == "+", 1, -1)
sales_data$B <- ifelse(sales_data$B == "+", 1, -1)
sales_data$C <- ifelse(sales_data$C == "+", 1, -1)
sales_data$D <- ifelse(sales_data$D == "+", 1, -1)
sales_data$E <- ifelse(sales_data$E == "+", 1, -1)
sales_data$F <- ifelse(sales_data$F == "+", 1, -1)
sales_data$G <- ifelse(sales_data$G == "+", 1, -1)
print(sales_data)
# ANOVA to analyze the factors' effect on the sales
anova_result <- aov(Response ~ A * B * C * D * E * F * G, data = sales_data)
summary(anova_result)
# Post-hoc test for significant factors (if ANOVA shows significance)
tukey_result <- TukeyHSD(anova_result)
summary(tukey_result)
# ANOVA to analyze the factors' effect on the sales
anova_result <- aov(Response ~ A * B * C * D * E * F * G, data = sales_data)
summary(anova_result)
# ANOVA to analyze the factors' effect on the sales
anova_result <- aov(Response ~ A * B * C * D * E * F * G, data = sales_data)
summary(anova_result)
